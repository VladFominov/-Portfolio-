{"version":3,"file":"static/js/1.cec6a014.chunk.js","mappings":"+JAAaA,EAAQ,CACjBC,QAAS,2BCDAC,EAAiB,SAACC,EAAWC,EAAWC,GACjD,IAAKF,EACD,KAAM,gFAEV,IAAKC,EACD,KAAM,wEAEV,IAAKC,EACD,KAAM,mFAEV,OAAO,CACX,E,kBCXaC,GAAqB,QAC9B,WAAYC,IAAc,eACtBC,KAAKC,OAASF,EAAeA,EAAaE,OAAS,EACnDD,KAAKE,KAAOH,EAAeA,EAAaI,aAAe,eAC3D,ICFSC,EAAW,SAACC,EAAKC,GAAuB,IAAjBC,EAAU,UAAH,6CAAG,CAAC,EAC3C,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,iBAAiB,QAAQ,YAAgB,IAAbC,EAAM,EAANA,OACtBC,EAAiB,IAAIjB,EAAsBgB,GACnB,MAA1BC,EAAed,QAA0C,OAAxBc,EAAeb,KAChDO,EAAQM,GAGRL,EAAOK,EAEf,IACAJ,EAAIE,iBAAiB,SAAS,YAAgB,IAAbC,EAAM,EAANA,OAC7BJ,EAAO,IAAIZ,EAAsBgB,GACrC,IACAH,EAAIK,KAAK,OAAQxB,EAAMC,QAAUY,GAAK,GACtCY,OAAOC,KAAKX,GAASY,SAAQ,SAACC,GAC1BT,EAAIU,iBAAiBD,EAAKb,EAAQa,GACtC,IACAT,EAAIW,KAAKhB,EACb,GACJ,ECnBA,ECoBwB,SAACV,EAAWC,EAAY0B,EAAM5B,GAClD,IAAM6B,EAAM7B,GAAaH,EAAMiC,QACzBC,EAvBW,SAACH,GAClB,IAAIG,EAOJ,KALIA,EADgB,kBAATH,EACOI,SAASC,cAAcL,GAGvBA,IAE2B,SAAzBG,EAAYG,SAC5B,KAAM,0FAEV,OAAOH,CACX,CAWwBI,CAAaP,GACjC7B,EAAe8B,EAAK5B,EAAWC,GAC/B,IAAMkC,EAAW,IAAIC,SAASN,GAK9B,OAJAK,EAASE,OAAO,cAAe,UAC/BF,EAASE,OAAO,aAAcrC,GAC9BmC,EAASE,OAAO,cAAepC,GAC/BkC,EAASE,OAAO,UAAWT,GACpBpB,EAAS,4BAA6B2B,EACjD,ECjCA,EAAkC,kCAAlC,EAAmF,+BAAnF,EAAyH,uBAAzH,EAAgK,gCAAhK,EAAmN,mCAAnN,EAAqQ,+BAArQ,EAAmT,+B,SCuDnT,EAnDgB,WACZ,IAAMR,GAAOW,EAAAA,EAAAA,UAwBb,OACE,qBAASC,UAAWC,EAAuB,WACzC,gBAAID,UAAWC,EAAoB,WACjC,iBAAMD,UAAWC,EAAoB,SAAC,QAAU,gBAElD,kBAAMC,IAAKd,EAAMe,SA3BL,SAACC,GACjBA,EAAEC,iBAEFC,EAEI,kBACA,mBACAlB,EAAKmB,QACL,qBAEDC,MACC,SAACC,GACKC,QAAQC,IAAIF,EAAO1C,MACnB2C,QAAQC,IAAI,gBACZP,EAAEzB,OAAOiC,OACf,IACA,SAACC,GACCH,QAAQC,IAAIE,EAAM9C,KACpB,GAEJ,EAO0CiC,UAAWC,EAAY,WAC3D,2BAAO,UACP,kBACED,UAAWC,EACXa,KAAK,OACLC,KAAK,eAEP,2BAAO,WACP,kBACEf,UAAWC,EACXa,KAAK,QACLC,KAAK,gBAEP,2BAAO,aACP,qBAAUf,UAAWC,EAAyBc,KAAK,aACnD,kBAAOD,KAAK,SAASE,MAAM,OAAOhB,UAAWC,SAIvD,EC1CA,EARqB,WACnB,OACE,0BACC,SAACgB,EAAQ,KAGd,C","sources":["../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","webpack://portfolio/./src/components/contacts/contacts.module.scss?89df","components/contacts/Contacts.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.10.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsSection\":\"contacts_contactsSection__tIopK\",\"contactTitle\":\"contacts_contactTitle__OOrlc\",\"form\":\"contacts_form__G5B1e\",\"contactsInput\":\"contacts_contactsInput__t8Qe8\",\"contactsTextarea\":\"contacts_contactsTextarea__AI-uu\",\"submitButton\":\"contacts_submitButton__XnuDg\",\"textColorize\":\"contacts_textColorize__LHzLo\"};","import React, { useRef } from 'react';\r\nimport emailjs from '@emailjs/browser';\r\n\r\nimport styles from \"./contacts.module.scss\";\r\n\r\nconst Contact = () => {\r\n    const form = useRef();\r\n\r\n  const sendEmail = (e) => {\r\n    e.preventDefault();\r\n\r\n    emailjs\r\n      .sendForm(\r\n        \"service_qu1pg6a\",\r\n        \"template_3am4cxs\",\r\n        form.current,\r\n        \"QQE1SltAzB7aEcAZ-\"\r\n      )\r\n      .then(\r\n        (result) => {\r\n              console.log(result.text);\r\n              console.log(\"massage sent\");\r\n              e.target.reset();\r\n        },\r\n        (error) => {\r\n          console.log(error.text);\r\n        }\r\n      );\r\n    };\r\n    \r\n    return (\r\n      <section className={styles.contactsSection}>\r\n        <h2 className={styles.contactTitle}>\r\n          <span className={styles.textColorize}>Get</span> in touch\r\n        </h2>\r\n        <form ref={form} onSubmit={sendEmail} className={styles.form}>\r\n          <label>Name</label>\r\n          <input\r\n            className={styles.contactsInput}\r\n            type=\"text\"\r\n            name=\"user_name\"\r\n          />\r\n          <label>Email</label>\r\n          <input\r\n            className={styles.contactsInput}\r\n            type=\"email\"\r\n            name=\"user_email\"\r\n          />\r\n          <label>Message</label>\r\n          <textarea className={styles.contactsTextarea} name=\"message\" />\r\n          <input type=\"submit\" value=\"Send\" className={styles.submitButton} />\r\n        </form>\r\n      </section>\r\n    );\r\n};\r\n\r\nexport default Contact;","import React from 'react'\r\nimport Contacts from \"../components/contacts/Contacts\";\r\n\r\n\r\nconst ContactsPage = () => {\r\n  return (\r\n    <div>\r\n     <Contacts />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactsPage;"],"names":["store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","httpResponse","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","useRef","className","styles","ref","onSubmit","e","preventDefault","emailjs","current","then","result","console","log","reset","error","type","name","value","Contacts"],"sourceRoot":""}